)
rm("sum")
h <- seq(12)
h
A <- array(h, (3,4))
A <- array(h, c(3,4))
A
A <- array(h, c(3,4))
A <- array(h, dim=c(3,4))
max(A)
max(A[:])
help("max")
pmax(A)
objects()
determinant(A)
help("array")
is.array(A)
is.double(A)
typeof(A)
A <- array(h+0.1, dim=c(3,4))
typeof(A)
is.double(A)
random(5)
help("Random")
runif(5)
A <- array(runif(9), dim=c(3,3))
B <- array(runif(9), dim=c(3,3))
A
B
A < B
determinant(A)
determinant(A)$modulus
help("determinant")
det(A)
A*B
A %*% B
runif(10)
runif(10)
runif(10, 0, 1)
runif(10, 0, 1)
runif(10, 0, 5)
runif(10, 0, 5)
rnorm(10)
sample(1:6, 10)
sample(1:6, 10, replace=TRUE)
x <- ('A', 'C', 'G', 'T')
x <- c('A', 'C', 'G', 'T')
sample(x, 100, replace=TRUE)
months = c(4,11,2,3,3,4,5,1,2,6,9,8,8,6,7,10,12)
months <- c(4,11,2,3,3,4,5,1,2,6,9,8,8,6,7,10,12)
factor(months)
help("factor")
fmons <- factor(months)
fmons
tickets=c(4,5,1,0,7,4,27,2,55,2,11,3,8,10,9,22,3)
ticketav=tapply(tickets,fmons,mean)
ticketav
typeof(ticketav)
n <- 3
if (n<5) {
print("less than 5")
} else if (n>5) {
print("greater than 5") {
compareToFive <- function(x) {}
if (x < 5) {}
if (x < 5) {
print("Less than five") {
compareToFive <- function(x) {
if (x < 5) {
print("Less than five") {
compareToFive <- function(x) {
if (x < 5) {
print("Less than five")
} else if (x > 5) {
print("Greater than five")
} else {}
print("Equal to five")
}
}
compareToFive <- function(x) {
if (x < 5) {
print("Less than five")
} else if (x > 5) {
print("Greater than five")
} else {
print("Equal to five")
}
}
compartToFive(3)
compareToFive(3)
compareToFive(7)
compareToFive(5)
square <- function(x) {
return(x*x)
}
square(5)
help(square)
??square
?square
x <- c(1,2,3,4,NA)
mean(x)
x[!is.na(x)]
x <- c(NA,1,2,3,4,NA)
x[!is.na(x)]
Sys.time()
Sys.time()
library(mkde)
date("condor")
data("condor")
mem_used()
library(pryr)
library(pryr)
install.packages("pryr")
mem_used()
library(pryr)
mem_used()
nrows(condor)
nrow(condor)
mem_used()
data("condordem")
mem_used()
nrow(condordem)
mem_used()
data("condordem120")
is_promise
is_promise()
is_promise(condordem)
is_promise(condordem120)
help("substitute")
.R_lib()
.libR()
.libPaths()
library(mkde2)
library(mkdebob)
library(mkdebob)
library(mkdebob)
library(mkdebob)
.libPaths( c( .libPaths(), "/Library/Frameworks/R.framework/Versions/3.5/Resources/library/EXP") )
.libPaths()
.libPaths("/Library/Frameworks/R.framework/Versions/3.5/Resources/library/EXP")
.libPaths()
library(mkde)
help(".libPaths")
.libPaths()
library(mkde)
.libPaths()
library("/Library/Frameworks/R.framework/Versions/3.5/Resources/library/EXP/mkde")
.libPaths("/Library/Frameworks/R.framework/Versions/3.5/Resources/library/EXP")
.libPaths()
library(mkde)
detach(mkde)
detach(package:mkde)
data("condor")
detach(mkde)
library(mkde)
data("condor")
detach(package:mkde)
data("condor")
install.packages("devtools")
.libPaths()
install.packages("devtools")
install.packages("roxygen2")
library(devtools)
library(roxygen2)
library(devtools)
.libPaths()
load_all("/Users/robertsinkovits/Dropbox/SEG/SCC_R_package")
F_to_C(32)
F_to_C(100)
C_to_F(40)
C_to_F(45)
dtimes = c("2002-06-09 12:45:40","2003-01-29 09:30:40")
dtparts = t(as.data.frame(strsplit(dtimes,' ')))
row.names(dtparts) = NULL
thetimes = chron(dates=dtparts[,1],times=dtparts[,2], format=c('y-m-d','h:m:s'))
library(chron)
as.Date("2002-06-09 12:45:40")
dts = c(1127056501,1104295502,1129233601,1113547501)
mydates = dts
class(mydates) = c('POSIXt','POSIXct')
mydates
dt = "2005-09-18 08:15:01 PDT"
mydates = dts
mydates = dt
class(mydates) = c('POSIXt','POSIXct')
mydates
class(mydates) = c('POSIXct','POSIXt')
mydates
as.POSIXlt("2005-09-18 08:15:01 PDT")
as.POSIXct("2005-09-18 08:15:01 PDT")
as.numeric(as.POSIXct("2013-09-16 2:13:46 EST"))
as.numeric(as.POSIXct("2006-12-30 08:00:00.000"))
getwd()
setwd("Spatial-Ecology")
files()
list.files()
library(mkde)
library(raster)
gpsdata <- read.csv("Condor-movebank-trunc.csv", header=TRUE)
list.files()
setwd("EXP")
gpsdata <- read.csv("Condor-movebank-trunc.csv", header=TRUE)
rm(gpsdata)
gpsmovebank <- read.csv("Condor-movebank-trunc.csv", header=TRUE)
gpstxt <- read.table("pandabob.txt", header=TRUE)
colnames(gpsmovebank)
"event.id" %in% colnames(gpsmovebank)
"event.idx" %in% colnames(gpsmovebank)
"event.id" %in% colnames(gpsmovebank) AND "visible" %in% colnames(gpsmovebank)
"event.id" %in% colnames(gpsmovebank) && "visible" %in% colnames(gpsmovebank)
x <- 5
print("HiBob")
if (x == 5) {print("a")} else {print("b")}
x <- 4
if (x == 5) {print("a")} else {print("b")}
x <- colnames(gpsmovebank)
x
x <- c('a', 'b', 'c')
x
len(x)
x <- list('a', 'b', 'c')
len(x)
x
x <- list)
x <- list()
'a',
'a',
x <- list(
'a',
'b',
'c')
x
expectedMovebankHeadings <-list(
"event.id",               "visible",
"timestamp",              "location.long",
"location.lat",           "ground.speed",
"heading",                "height.raw",
"sensor.type",            "individual.taxon.canonical.name",
"tag.local.identifier",   "individual.local.identifier",
"study.name",             "utm.easting",
"utm.northing",           "utm.zone")
expectedMovebankHeadings
identical("expectedMovebankHeadings", colnames(gpsmovebank))
identical(expectedMovebankHeadings, colnames(gpsmovebank))
expectedMovebankHeadings
colnames(gpsmovebank)
expectedMovebankHeadings <-c(
"event.id",               "visible",
"timestamp",              "location.long",
"location.lat",           "ground.speed",
"heading",                "height.raw",
"sensor.type",            "individual.taxon.canonical.name",
"tag.local.identifier",   "individual.local.identifier",
"study.name",             "utm.easting",
"utm.northing",           "utm.zone")
colnames(gpsmovebank)
expectedMovebankHeadings <-vector(
"event.id",               "visible",
"timestamp",              "location.long",
"location.lat",           "ground.speed",
"heading",                "height.raw",
"sensor.type",            "individual.taxon.canonical.name",
"tag.local.identifier",   "individual.local.identifier",
"study.name",             "utm.easting",
"utm.northing",           "utm.zone")
vector('a', 'b', 'c')
x <- c('a', 'b', 'c')
x
x[1]
x[2]
x[3]
expectedMovebankHeadings <-c(
"event.id",               "visible",
"timestamp",              "location.long",
"location.lat",           "ground.speed",
"heading",                "height.raw",
"sensor.type",            "individual.taxon.canonical.name",
"tag.local.identifier",   "individual.local.identifier",
"study.name",             "utm.easting",
"utm.northing",           "utm.zone")
expectedMovebankHeadings
colnames(gpsmovebank)
setequal(expectedMovebankHeadings, colnames(gpsmovebank))
expectedMovebankHeadings <-c(
"event.id",               "visible",
"timestamp",              "location.long",
"location.lat",           "ground.speed",
"heading",                "height.raw",
"sensor.type",            "individual.taxon.canonical.name",
"tag.local.identifier",   "individual.local.identifier",
"study.name",             "utm.easting",
"utm.northing",           "utm.zonexxx")
setequal(expectedMovebankHeadings, colnames(gpsmovebank))
expectedMovebankHeadings <-c(
"event.id",               "visible",
"timestamp",              "location.long",
"location.lat",           "ground.speed",
"heading",                "height.raw",
"sensor.type",            "individual.taxon.canonical.name",
"tag.local.identifier",   "individual.local.identifier",
"study.name",             "utm.easting",
"utm.northing",           "utm.zone")
setequal(expectedMovebankHeadings, colnames(gpsmovebank))
if (setequal(expectedMovebankHeadings, colnames(gpsmovebank))) {
print("Movebank format")
} else {
print("Not Movebank format")
}
if (setequal(expectedMovebankHeadings, colnames(gpstxt))) {
print("Movebank format")
} else {
print("Not Movebank format")
}
noutm <- read.csv("Condor-movebank-trunc-noutm.csv", header=TRUE)
noutm <- read.csv("Condor-movebank-trunc-noutm.csv", header=TRUE)
gpsnoutm <- read.csv("Condor-movebank-trunc-noutm.csv", header=TRUE)
if (setequal(expectedMovebankHeadings, colnames(gpsmovebank))) {
print("Movebank format with UTM coordinates")
else if (setequal(expectedMovebankHeadingsNoUTM, colnames(gpsmovebank))) {
print("Movebank format without UTM coordinates")
} else {
print("Not Movebank format")
}
if (setequal(expectedMovebankHeadings, colnames(gpsmovebank))) {
print("Movebank format with UTM coordinates")
} else if (setequal(expectedMovebankHeadingsNoUTM, colnames(gpsmovebank))) {
print("Movebank format without UTM coordinates")
} else {
print("Not Movebank format")
}
if (setequal(expectedMovebankHeadings, colnames(gpsnoutm))) {
print("Movebank format with UTM coordinates")
} else if (setequal(expectedMovebankHeadingsNoUTM, colnames(gpsnoutm))) {
print("Movebank format without UTM coordinates")
} else {
print("Not Movebank format")
}
expectedMovebankHeadingsNoUTM <-c(
"event.id",               "visible",
"timestamp",              "location.long",
"location.lat",           "ground.speed",
"heading",                "height.raw",
"sensor.type",            "individual.taxon.canonical.name",
"tag.local.identifier",   "individual.local.identifier",
"study.name")
if (setequal(expectedMovebankHeadings, colnames(gpsnoutm))) {
print("Movebank format with UTM coordinates")
} else if (setequal(expectedMovebankHeadingsNoUTM, colnames(gpsnoutm))) {
print("Movebank format without UTM coordinates")
} else {
print("Not Movebank format")
}
rm(list=ls())
source("exp1.R")
source("exp1.R")
source("exp1.R")
library(rgdal)
library('rgdal')
library(rgdal)
library(move)
install.packages(move)
install.packages('move')
library(move)
movebankLogin(username="RSinkovits", password="aBBa&0805&mb")
login <- movebankLogin(username="xxx", password="zzz")
getMovebankStudies(login)
login
login <- movebankLogin(username="RSinkovits", password="aBBa&0805&mb")
login
getMovebankStudies(login)
getMovebankStudies(login)
getMovebankData(study=2911040)
getMovebankData(study=2911040)
getMovebankData(study=2911040, login=login)
albatross <- getMovebankData(study=2911040, login=login)
class(albatross)
albatross
albatross$bbox
albatross$citation
albatross.citation
citations(albatross)
as.data.frame(albatross)
adf <- as.data.frame(albatross)
colnames(adf)
adf$location_lat
head(adf$location_lat)
head(adf$loca_long)
head(adf$location_long)
head(adf$location_timestamp)
head(adf$timestamp)
library(gdal)
install.packages("gdal")
library(sp)
xy <- data.frame(ID = 1:2, X = c(118, 119), Y = c(10, 50))
coordinates(xy) <- c("X", "Y")
proj4string(xy) <- CRS("+proj=longlat +datum=WGS84")
res <- spTransform(xy, CRS("+proj=utm +zone=51 ellps=WGS84"))
res
xy <- data.frame(ID = 1:2, X = c(118, 119), Y = c(10, 50))
coordinates(xy) <- c("X", "Y")
res <- spTransform(xy, CRS("+proj=utm))
)
res <- spTransform(xy, CRS("+proj=utm +zone=51))
res <- spTransform(xy, CRS("+proj=utm +zone=51))
albatross
class(albatross)
bbox(albatross)
a <- albatross
coords(a)
citation(a)
citations(a)
data(a)
data(albatross)
as.data.frame(a)
df <- as.data.frame(albatross)
colnames(df)
lats <- df$location_lat
length(lats)
x <- c('a', 'b', 'c', 'a')
unique(x)
length(df$tag_id)
unique(df$tag_id)
2911080 in unique(df$tag_id)
"2911080" in unique(df$tag_id)
"2911080" %in% unique(df$tag_id)
"2911114" %in% unique(df$tag_id)
2911114 %in% unique(df$tag_id)
2911114 %in% unique(df$deployment_id)
unique(df$deployment_id)
length(unique(df$deployment_id))
sort(unique(df$deployment_id))
df[1]
df[1,2]
hed(df)
head(df)
tail(df)
df
df[5636]
df[5636,]
df[1,]
colname(df)
colnames(df)
df[["tag_id"]]
df[[1-5],["tag_id"]]
df[c(1,2,3),["tag_id"]]
df[c(1,2,3), ["tag_id"]]
df[c(1,2,3), c("tag_id")]
df[c(1,2,3), c("tag_id", "location_lat", "location_long")]
df[c(1,2,3), c("tag_id", "location_lat")]
df[c(4,5,6), c("tag_id", "location_lat")]
df[c(4,5,6), c("tag_id", "location_lat", "location_long")]
df[which(tag_id==2911119), c("tag_id", "location_lat", "location_long")]
df[which(df$tag_id==2911119), c("tag_id", "location_lat", "location_long")]
length(df[which(df$tag_id==2911119), c("tag_id", "location_lat", "location_long")])
df[which(df$tag_id==2911119), c("tag_id", "location_lat", "location_long", "timestamp", "visible, "event_id"")]
df[which(df$tag_id==2911119), c("tag_id", "location_lat", "location_long", "timestamp", "visible", "event_id"")]
df[which(df$tag_id==2911119), c("tag_id", "location_lat", "location_long", "timestamp", "visible", "event_id")]
condor <- getMovebankData(study=408181528, login=login)
codor
condor
dfc <- as.data.frame(condor)
colnames(dfc)
rows(dfc)
nrow(dfc)
length(unique(dfc$tag_id))
unique(dfc$tag_id)
unique(dfc$tag_local_identifier)
dfc$tag_local_identifier
head(dfc$tag_local_identifier)
tail(dfc$tag_local_identifier)
dfc$tag_local_identifier[(where dfc$tag_local_identifier=269)]
dfc$tag_local_identifier[where (dfc$tag_local_identifier=269)]
dfc$tag_local_identifier[(where dfc$tag_local_identifier=269)]
dfc$tag_local_identifier[(which $tag_local_identifier=269)]
dfc$tag_local_identifier[which(dfc$tag_local_identifier ==269)]
length(dfc$tag_local_identifier[which(dfc$tag_local_identifier == 269)])
length(dfc$tag_local_identifier[which(dfc$tag_local_identifier == 284)])
condor <- getMovebankData(study=408181528, login=login)
dfc$trackId
condors <- split(condor)
condors
condors
colnames(condor)
colnames(dfc)
condor_1 <- as.data.frame(condors[1])
colnames(condor_1)
condor_2 <- as.data.frame(condors[2])
colnames(condor_2)
spTransform(condors)
class(condors)
spTransform(condor_1)
condor <- getMovebankData(study=408181528, login=login)
class(condors)
class(condors$X284)
spTransform(condors$X284)
spTransform(condors$X284, center=TRUE)
spTransform(condors, center=TRUE)
spTransform(condors$X269, center=TRUE)
condor_1 <- as.data.frame(condors$X269)
condor_2 <- as.data.frame(condors$X284)
colnames(condor_1)
head(condor_1$location_lat)
head(condor_1$location_long)
head(condor_1$coords.x1)
head(condor_1$coords.x2)
condors$X269 <- spTransform(condors$X269, center=TRUE)
condors$X284 <- spTransform(condors$X284, center=TRUE)
condor_1 <- as.data.frame(condors$X269)
condor_2 <- as.data.frame(condors$X284)
colnames(condor_1)
proj4string(condors$X269)
condors$X269
